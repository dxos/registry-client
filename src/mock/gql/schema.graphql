#
# Copyright 2019 Wireline, Inc.
#

# BigUInt is a 64-bit unsigned int.
scalar BigUInt

# Reference to another record.
type Reference {
  id:         String!         # ID of linked record.
}

# Reference to another record.
input ReferenceInput {
  id:         String!
}

# Value of a given type.
type Value {
  null:       Boolean

  int:        Int
  float:      Float
  string:     String
  boolean:    Boolean

  reference:  Reference

  values:     [Value]
}

# Value of a given type used as input to queries.
input ValueInput {
  null:       Boolean

  int:        Int
  float:      Float
  string:     String
  boolean:    Boolean

  reference:  ReferenceInput

  values:     [ValueInput]
}

# Key/value pair.
type KeyValue {
  key:        String!
  value:      Value!
}

# Key/value pair for inputs.
input KeyValueInput {
  key:        String!
  value:      ValueInput!
}

# Extensions define additional properties for an entity in the graph database.
interface Extension {
  name:       String!
}

# Record defines the basic properties of an entity in the graph database.
type Record {
  id:        String!         # Computed attribute: Multibase encoded content hash (https://github.com/multiformats/multibase).
  type:       String!         # wrn:<type>, e.g. wrn:bot, wrn:pad.
  name:       String!         # e.g. wireline.io/chess
  version:    String!         # Version (e.g. 0.1.0).

  bondId:     String!         # Associated bond ID.
  createTime: String!         # Record create time.
  expiryTime: String!         # Record expiry time.

  owners:     [String]!       # Addresses of record owners.
  attributes: [KeyValue]      # Record attributes.
  references: [Record]        # Record references.
  extension:  Extension       # Extension.
}

# Mutations require payment in coins (e.g. 100wire).
# Used by the wallet to get the account balance for display and mutations.
type Coin {
  type:       String!         # e.g. 'WIRE'
  quantity:   BigUInt!        # e.g. 1000000
}

# Represents an account on the blockchain.
# Mutations have to be signed by a particular account.
type Account {
  address:  String!           # Blockchain address.
  pubKey:   String            # Public key.
  number:   BigUInt!          # Account number.
  sequence: BigUInt!          # Sequence number used to prevent replays.
  balance:  [Coin!]           # Current balance for each coin type.
}

# Bonds contain funds that are used to pay rent on record registration and renewal.
type Bond {
  id:         String!         # Primary key, auto-generated by the server.
  owner:      String!         # Bond owner cosmos-sdk address.
  balance:    [Coin!]         # Current balance for each coin type.
}

# WNS status.
type Status {
  version:  String!
}

type Query {

  #
  # Status API.
  #
  getStatus: Status!

  #
  # Wallet API.
  #

  # Get blockchain accounts.
  getAccounts(
    addresses: [String!]
  ): [Account]

  # Get bonds by IDs.
  getBondsByIds(
    ids: [String!]
  ): [Bond]

  # Query bonds.
  queryBonds(
    # Multiple attribute conditions are in a logical AND.
    attributes: [KeyValueInput]
  ): [Bond]

  #
  # GraphDB API.
  #

  # Get records by IDs.
  getRecordsByIds(
    ids: [String!]
  ): [Record]

  # Query records.
  queryRecords(
    # Multiple attribute conditions are in a logical AND.
    attributes: [KeyValueInput]
  ): [Record]

  # Resolve WRNs to records.
  resolveRecords(
    refs: [String!]
  ): [Record]
}

type Mutation {

  # Add new record.
  insertRecord(
    attributes: [KeyValueInput]!
  ): Record

  # Submit a transaction to the blockchain.
  # `tx` is a blob created by https://github.com/wirelineio/registry-client.
  submit(tx: String!): String
}
